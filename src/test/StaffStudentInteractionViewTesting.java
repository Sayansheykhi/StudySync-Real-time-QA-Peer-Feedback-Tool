package test;

import static org.junit.jupiter.api.Assertions.*;

import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.ArrayList;

import databasePart1.DatabaseHelper;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import application.Answer;
import application.Question;
import application.Review;
import application.ReviewerMessage;
import application.User;


/**
 * The StaffStudentInteractionViewTesting class represents an interface for performing JUnit testing on the StaffStudentInteractionView.java class.
 *
 * IMPORTANT: uncomment out Line 97 of DatabaseHelper.java before running
 * 
 * @author Cristina Hooe
 * @version 1.0 4/10/2025
 * @version 2.0 4/25/2025
 */
class StaffStudentInteractionViewTesting {

	/**
	 * DatabaseHelper object to call DatabaseHelper functions that need to be tested and connect to/ disconnect from the database
	 */
	static DatabaseHelper databaseHelper = new DatabaseHelper();
	
	/**
	 * Array of the test users provisioned roles where they are provisioned as a Student
	 */
	static boolean[] studentRole = {false, true, false, false, false};
	
	/**
	 * Array of the test users provisioned roles where they are provisioned as a Reviewer
	 */
	static boolean[] reviewerRole = {false, false, true, false, false};
	
	/**
	 * Test user Student to use for methods that require an argument of type User
	 */
	static User testUserStudent;
	
	/**
	 * Second Test user Student to use for methods that require an argument of type User
	 */
	static User testUserStudent2;
	
	/**
	 * Test user Reviewer to use for methods that require an argument of type User
	 */
	static User testUserReviewer;
	
	/**
	 * Test User object which is instantiated but not registered in the database
	 */
	static User testUserNotRegistered;
	
	/**
	 * Test User object which is instantiated but not registered in the database
	 */
	static User testUserNotRegistered2;
	
	/**
	 * Question object specific to a question which is added to the database
	 */
	static Question newQuestion;
	
	/**
	 * Question object not used to add a question to the database
	 */
	static Question fakeQuestion;
	
	/**
	 * questionID generated by the database when adding the test question
	 */
	static int questionID;
	
	/**
	 * Question object specific to a question reply which is added to the database
	 */
	static Question newQuestionReply;
	
	/**
	 * replyID generated by the database when adding the test question reply
	 */
	static int replyID;
	
	/**
	 * Question object specific to a question reply which is added to the database, but only used to test databaseHelper.hideQuestionReply()
	 */
	static Question questionReplyToHide;
	
	/**
	 * replyID generated by the database when adding questionReplyToHide
	 */
	static int replyIDToHide;
	
	/**
	 * Question object not used to add a question reply to the database
	 */
	static Question fakeQuestionReply;
	
	/**
	 * Answer object specific to an answer which is added to the database
	 */
	static Answer newAnswer;
	
	/**
	 * answerID generated by the database when adding the test answer
	 */
	static int answerID;
	
	/**
	 * Answer object specific to an answer which is added to the database, but only used to test databaseHelper.hideAnswer()
	 */
	static Answer answerToHide;
	
	/**
	 * replyID generated by the database when adding answerToHide
	 */
	static int answerIDToHide;
	
	/**
	 * Answer object not used to add an answer to the database
	 */
	static Answer fakeAnswer;
	
	/**
	 * Review object specific to a review which is added to the database
	 */
	static Review newReview;
	
	/**
	 * reviewID generated by the database when adding the test review
	 */
	static int reviewID;
	
	/**
	 * Review object not used to add a review to the datbaase
	 */
	static Review fakeReview;

	/**
	 * ReviewerMessage object for test message sent from testUserReviewer to testUserStudent
	 */
	static ReviewerMessage messageObject;
	
	/**
	 * messageID generated by the database when adding the message from Reviewer to testUserStudent to the database
	 */
	static int reviewerToStudentMessageID;
	
	/**
	 * Method connects to the database and initializes necessary general test objects.
	 * 
	 * @throws Exception SQLException "Failed to connect to database"
	 */
	@BeforeAll
	static void setUpBeforeClass() throws Exception {
		// Create a database connection
		try {
			databaseHelper.connectToDatabase();
		} catch (SQLException e) {
			System.out.println("Failed to connect to database");
		}
		
		// Instantiate student user
		testUserStudent = new User("testStudentUserName", studentRole, "testStudentEmail@asu.edu", "testStudentFirstName", "testStudentLastName", false);
		
		// Add user to the database
		databaseHelper.register(testUserStudent);
		
		// Instantiate 2nd student user
		testUserStudent2 = new User("testSecondStudentUserName", studentRole, "testSecondStudentEmail@asu.edu", "testSecondStudentFirstName", "testSecondStudentLastName", false);
		
		// Add user to the database
		databaseHelper.register(testUserStudent2);
		
		// Instantiate Reviewer user
		testUserReviewer = new User("testReviewerUserName", reviewerRole, "testReviewerEmail@asu.edu", "testReviewerFirstName", "testReviewerLastName", false);
		
		// Add user to the database
		databaseHelper.register(testUserReviewer);
		
		// Instantiate test user but don't add to the database
		testUserNotRegistered = new User("testNonRegisteredUserName", reviewerRole, "testNonRegisteredEmail@asu.edu", "testNonRegisteredFirstName", "testNonRegisteredLastName", false);
		
		// Instantiate test user but don't add to the database
		testUserNotRegistered2 = new User("testNonRegistered2UserName", studentRole, "testNonRegistered2Email@asu.edu", "testNonRegistered2FirstName", "testNonRegistered2LastName", false);
		
		// Instantiate Question object
		newQuestion = new Question(-1, testUserStudent.getUserName(), testUserStudent.getFirstName(), testUserStudent.getLastName(), "Test Question Title", "Test Question Body", false, LocalDateTime.now(), false, "", false);
		
		// Add a test Question to the database
		questionID = databaseHelper.addQuestion(newQuestion.getQuestionTitle() , newQuestion.getQuestionBody(), newQuestion, testUserStudent);
		newQuestion.setQuestionID(questionID);
		
		// Instantiate Question object which will not be added to the database
		fakeQuestion = new Question(-1, testUserStudent.getUserName(), testUserStudent.getFirstName(), testUserStudent.getLastName(), "Test Question Title", "Test Question Body", false, LocalDateTime.now(), false, "", false);
		
		// Instantiate Question reply object
		newQuestionReply = new Question(-1, newQuestion.getQuestionID(), testUserStudent2.getUserName(), testUserStudent2.getFirstName(), testUserStudent2.getLastName(), "Test Question Reply", "Replying to: " + newQuestion.getQuestionTitle(), false, "", false);
		newQuestionReply.setCreationTime(LocalDateTime.now());
		
		// Add test Question reply to the database
		replyID = databaseHelper.addReply(newQuestionReply.getQuestionReply(), questionID, newQuestionReply, testUserStudent2, newQuestionReply.getReplyingTo());
		newQuestionReply.setReplyID(replyID);
		
		// Instantiate Question reply object which will only be used in databaseHelper.hideQuestionReply()
		questionReplyToHide = new Question(-1, newQuestion.getQuestionID(), testUserStudent2.getUserName(), testUserStudent.getFirstName(), testUserStudent.getLastName(), "Test Question Reply to Hide", "Replying to: " + newQuestion.getQuestionTitle(), false, "", false);
		questionReplyToHide.setCreationTime(LocalDateTime.now());
		
		// Add test Question reply to hide to the database
		replyIDToHide = databaseHelper.addReply(questionReplyToHide.getQuestionReply(), questionID, questionReplyToHide, testUserStudent, questionReplyToHide.getReplyingTo());
		questionReplyToHide.setReplyID(replyIDToHide);
		
		// Instantiate Question Reply object which will not be added to the database
		fakeQuestionReply = new Question(-1, newQuestion.getQuestionID(), testUserStudent2.getUserName(), testUserStudent2.getFirstName(), testUserStudent2.getLastName(), "Test Question Reply", "Replying to: " + newQuestion.getQuestionTitle(), false, "", false);
		
		// Instantiate Answer object
		newAnswer = new Answer(-1, questionID, testUserStudent2.getUserName(), testUserStudent2.getFirstName(), testUserStudent2.getLastName(), "Test Answer Text", true, false, LocalDateTime.now(), false, "", false);
		
		// Add a test Answer to the database
		answerID = databaseHelper.addAnswers(newAnswer.getAnswerText(), newAnswer, testUserStudent2, questionID);
		newAnswer.setAnswerID(answerID);
		
		// Instantiate Answer object which will only be used in databaseHelper.hideAnswer()
		answerToHide = new Answer(-1, questionID, testUserStudent.getUserName(), testUserStudent.getFirstName(), testUserStudent.getLastName(), "Test Answer Text to Hide", true, false, LocalDateTime.now(), false, "", false);
		
		// Add test answer to hide in the database
		answerIDToHide = databaseHelper.addAnswers(answerToHide.getAnswerText(), answerToHide, testUserStudent, questionID);
		answerToHide.setAnswerID(answerIDToHide);
		
		// Instantiate Answer object which will not be added to the database
		fakeAnswer = new Answer(-1, questionID, testUserStudent2.getUserName(), testUserStudent2.getFirstName(), testUserStudent2.getLastName(), "Test Answer Text", true, false, LocalDateTime.now(), false, "", false);
		
		// Instantiate Review object
		newReview = new Review(questionID, answerID, -1, -1, "Test Review Body", testUserReviewer.getUserName(), testUserReviewer.getFirstName(), testUserReviewer.getLastName(), false, "", false);
		
		// Add a test Review to the database
		reviewID = databaseHelper.addReview(testUserReviewer.getUserName(), testUserReviewer.getFirstName(), testUserReviewer.getLastName(), newReview.getReviewBody(), questionID, answerID, -1);
		newReview.setReviewID(reviewID);
		
		// Instantiate Review object which will not be added to the database
		fakeReview = new Review(questionID, answerID, -1, -1, "Test Review Body", testUserReviewer.getUserName(), testUserReviewer.getFirstName(), testUserReviewer.getLastName(), false, "", false);
		
		// Send a message from testUserStudent to testUserStudent2
		databaseHelper.sendPrivateMessage("testStudentUserName", "testSecondStudentUserName", "Test message subject for message from testUserStudent to testUserStudent2", "Test message body for message from testUserStudent to testUserStudent2", "-1");
		
		// Send a message from testUserStudent2 to testUserStudent
		databaseHelper.sendPrivateMessage("testSecondStudentUserName", "testStudentUserName", "Test message subject for message from testUserStudent2 to testUserStudent", "Test message body for message from testUserStudent2 to testUserStudent", "-1");
		
		// Send a message from testUserReviewer to testUserStudent
		messageObject = new ReviewerMessage(-1, "testReviewerUserName", "testStudentUserName", "Student", "Test message subject for message from testUserReviewer to testUserStudent", "Test message body for message from testUserReviewer to testUserStudent", LocalDateTime.now() ,false, -1);
		reviewerToStudentMessageID = databaseHelper.saveReviewerMessage(messageObject);
		
		// Send a message from testUserStudent to testUserReviewer
		databaseHelper.sendPrivateMessage("testStudentUserName", "testReviewerUserName", "Test message subject for message from testUserStudent to testUserReviewer", "Test message body for message from testUserStudent to testUserReviewer", "-1");
	}

	/**
	 * Deletes the test objects from the database and closes the database connection.
	 */
	@AfterAll
	static void tearDownAfterClass() {
		
		// Delete student-to-student messages
		databaseHelper.deletePrivateMessage("1");
		databaseHelper.deletePrivateMessage("2");
		
		// Delete reviewer-to-student and student-to-reviewer messages
		databaseHelper.deleteReviewerMessage(1);
		databaseHelper.deletePrivateMessage("3");
		
		// Delete Review
		databaseHelper.deleteReview(reviewID);
		
		// Delete Answer
		databaseHelper.deleteAnswer(answerID);
		
		// Delete Answer used only in test for databaseHelper.hideAnswer()
		databaseHelper.deleteAnswer(answerIDToHide);
		
		// Delete Question Reply
		databaseHelper.deleteRepliesForQuestion(questionID);
		
		// Delete Question Reply only used in test for databaseHelper.markQuestionReplyFlagged()
		databaseHelper.deleteRepliesForQuestion(replyIDToHide);
		
		// Delete Question
		databaseHelper.deleteQuestion(questionID);
		
		// Delete reviewer user from the database
		databaseHelper.deleteUser(testUserReviewer);
		
		// Delete 2nd student user from the database
		databaseHelper.deleteUser(testUserStudent2);
		
		// Delete student user from the database
		databaseHelper.deleteUser(testUserStudent);
		
		// Close the database connection
		databaseHelper.closeConnection();	
	}
	
	/**
	 * Test valid values for databaseHelper.getAllMessagesBetweenStudents().
	 */
	@Test
	public void NormalTestGetAllMessagesBetweenStudents() {
		assertEquals(2, databaseHelper.getAllMessagesBetweenStudents().size(), "ArrayList should be of size 2 for 2 stored messages between students users in the database");
		assertNotNull(databaseHelper.getAllMessagesBetweenStudents(), "ArrayList returned should never be null");
	}
	
	/**
	 * Test invalid values for databaseHelper.getAllMessagesBetweenStudents().
	 */
	@Test
	public void RobustTestGetAllMessagesBetweenStudents() {
		assertNotEquals(0, databaseHelper.getAllMessagesBetweenStudents().size(), "ArrayList should not be of size 0 for 2 stored messages between students users in the database");
	}
	
	/**
	 * Test valid values for databaseHelper.getAllMessagesBetweenReviewersAndStudents().
	 */
	@Test
	public void NormalTestGetAllMessagesBetweenReviewersAndStudents() {
		assertEquals(2, databaseHelper.getAllMessagesBetweenReviewersAndStudents().size(), "ArrayList should be of size 2 for 2 stored messages between a reviewer user and student user in the database");
		assertNotNull(databaseHelper.getAllMessagesBetweenReviewersAndStudents(), "ArrayList returned should never be null");
	}
	
	/**
	 * Test invalid values for databaseHelper.getAllMessagesBetweenReviewersAndStudents()
	 */
	@Test
	public void RobustTestGetAllMessagesBetweenReviewersAndStudents() {
		assertNotEquals(0, databaseHelper.getAllMessagesBetweenReviewersAndStudents().size(), "ArrayList should not be of size 0 for 2 stored messages between a reviewer user and student user in the database");
	}
	
	/**
	 * Test valid values for databaseHelper.markQuestionFlagged()
	 */
	@Test
	public void NormalTestMarkQuestionFlagged() {
		assertFalse(newQuestion.getIsFlagged(), "Question not yet marked flagged should yield false for the Question.getIsFlagged() function");
		databaseHelper.markQuestionFlagged(newQuestion);
		assertTrue(newQuestion.getIsFlagged(), "Question marked flagged should yield true for the Question.getIsFlagged() function");
	}
	
	/**
	 * Test invalid values for databaseHelper.markQuestionFlagged()
	 */
	@Test
	public void RobustTestMarkQuestionFlagged() {
		databaseHelper.markQuestionFlagged(fakeQuestion);
		assertFalse(fakeQuestion.getIsFlagged(), "Question with questionID = -1 not inserted into the database should yield false for the Question.getIsFlagged() function");
	}
	
	/**
	 * Test valid values for databaseHelper.markQuestionReplyFlagged()
	 */
	@Test
	public void NormalTestMarkQuestionReplyFlagged() {
		assertFalse(newQuestionReply.getIsFlagged(), "Question reply not yet marked flagged should yield false for the Question.getIsFlagged() function");
		databaseHelper.markQuestionReplyFlagged(newQuestionReply);
		assertTrue(newQuestionReply.getIsFlagged(), "Question reply marked flagged should yield true for the Question.getIsFlagged() function");
	}
	
	/**
	 * Test invalid values for databaseHelper.markQuestionReplyFlagged()
	 */
	@Test
	public void RobustTestMarkQuestionReplyFlagged() {
		databaseHelper.markQuestionReplyFlagged(fakeQuestionReply);
		assertFalse(fakeQuestionReply.getIsFlagged(), "Question reply with replyID = -1 not inserted into the database should yield false for the Question.getIsFlagged() function");
	}
	
	/**
	 * Test valid values for databaseHelper.markAnswerFlagged()
	 */
	@Test
	public void NormalTestMarkAnswerFlagged() {
		assertFalse(newAnswer.getIsFlagged(), "Answer not yet marked flagged should yield false for the Answer.getIsFlagged() function");
		databaseHelper.markAnswerFlagged(newAnswer);
		assertTrue(newAnswer.getIsFlagged(), "Answer marked flagged should yield true for the Answer.getIsFlagged() function");
	}
	
	/**
	 * Test invalid values for databaseHelper.markAnswerFlagged()
	 */
	@Test
	public void RobustTestMarkAnswerFlagged() {
		databaseHelper.markAnswerFlagged(fakeAnswer);
		assertFalse(fakeAnswer.getIsFlagged(), "Answer with answerID = -1 not inserted into the database should yield false for the Answer.getIsFlagged() function");
	}
	
	/**
	 * Test valid values for databaseHelper.markReviewFlagged()
	 */
	@Test
	public void NormalTestMarkReviewFlagged() {
		assertFalse(newReview.getIsFlagged(), "Review not yet marked flagged should yield false for the Review.getIsFlagged() function");
		databaseHelper.markReviewFlagged(newReview);
		assertTrue(newReview.getIsFlagged(), "Review marked flagged should yield true for the Review.getIsFlagged() function");
	}
	
	/**
	 * Test invalid values for databaseHelper.markReviewFlagged()
	 */
	@Test
	public void RobustTestMarkReviewFlagged() {
		databaseHelper.markReviewFlagged(fakeReview);
		assertFalse(fakeReview.getIsFlagged(), "Review with reviewID = -1 not inserted into the database should yield false for the Review.getIsFlagged() function");
	}
	
	/**
	 * Test valid values for databaseHelper.getStudentAndReviewerUsers() 
	 */
	@Test
	public void NormalTestGetStudentAndReviewerUsers() {
		assertEquals(3, databaseHelper.getStudentAndReviewerUsers().size(), "ArrayList size returned should be 3 for 2 Test Student users and 1 Test Reviewer user");
		assertNotNull(databaseHelper.getStudentAndReviewerUsers() , "ArrayList returned should never be null");
	}
	
	/**
	 * Test invalid values for databaseHelper.getStudentAndReviewerUsers() 
	 */
	@Test
	public void RobustTestGetStudentAndReviewerUsers() {
		assertNotEquals(1, databaseHelper.getStudentAndReviewerUsers().size(), "ArrayList size returned should not be 1 since there are 2 Test Student Users and 1 Test Reviewer user");
		assertNotEquals(2, databaseHelper.getStudentAndReviewerUsers().size(), "ArrayList size returned should not be 2 since there are 2 Test Student Users and 1 Test Reviewer user");
	}
	
	/**
	 * Test valid values for databaseHelper.muteUser()
	 */
	@Test
	public void NormalTestMuteUser() {
		// Mute testUserStudent2 who submitted a Question reply and Answer
		assertFalse(testUserStudent2.getIsMuted(), "User not yet muted should yield false for the User.getIsMuted() function");
		databaseHelper.muteUser(testUserStudent2);
		assertTrue(testUserStudent2.getIsMuted(), "User muted should yield true for the User.getIsMuted() function");
	}
	
	/**
	 * Test invalid values for databaseHelper.muteUser()
	 */
	@Test
	public void RobustTestMuteUser() {
		databaseHelper.muteUser(testUserNotRegistered);
		assertFalse(testUserNotRegistered.getIsMuted(), "User not inserted into the database should yield false for the User.getIsMuted() function");
	}
	
	/**
	 * Test valid values for databaseHelper.hideAllQuestionsForMutedUser()
	 */
	@ Test
	public void NormalTestHideAllQuestionsForMutedUser() {
		assertFalse(databaseHelper.hideAllQuestionsForMutedUser(testUserStudent2), "testUserStudent2 submitted only a Question Reply and Answer, so no rows should be updated in the database and the return value should be false");
	}
	
	/**
	 * Test invalid values for databaseHelper.hideAllQuestionsForMutedUser()
	 */
	@ Test
	public void RobustTestHideAllQuestionsForMutedUser() {
		assertFalse(databaseHelper.hideAllQuestionsForMutedUser(testUserNotRegistered2), "Since testUserNotRegistered2 is not a registered user and never submitted any Questions, the return value should be false");
	}
	
	/**
	 * Test valid values for databaseHelper.hideAllQuestionRepliesForMutedUser()
	 */
	@Test
	public void NormalTestHideAllQuestionRepliesForMutedUser() {
		assertTrue(databaseHelper.hideAllQuestionRepliesForMutedUser(testUserStudent2), "Since testUserStudent2 did submit a Question Reply, rows should be updated in the database and the return value should be true");
	}
	
	/**
	 * Test invalid values for databaseHelper.hideAllQuestionRepliesForMutedUser()
	 */
	@Test
	public void RobustTestHideAllQuestionRepliesForMutedUser() {
		assertFalse(databaseHelper.hideAllQuestionRepliesForMutedUser(testUserNotRegistered2), "Since testUserNotRegistered2 is not a registered user and never submitted any Question Replies, the return value should be false");
	}
	
	/**
	 * Test valid values for databaseHelper.hideAllAnswersForMutedUser()
	 */
	@Test
	public void NormalTestHideAllAnswersForMutedUser() {
		assertTrue(databaseHelper.hideAllAnswersForMutedUser(testUserStudent2), "Since testUserStudent2 did submit an Answer, rows should be updated in the database and the return value should be true");
	}
	
	/**
	 * Test invalid values for databaseHelper.hideAllAnswersForMutedUser()
	 */
	@Test
	public void RobustTestHideAllAnswersForMutedUser() {
		assertFalse(databaseHelper.hideAllAnswersForMutedUser(testUserNotRegistered2), "Since testUserNotRegistered2 is not a registered user and never submitted any Answers, the return value should be false");
	}
	
	/**
	 * Test valid values for databaseHelper.hideAllReviewsForMutedUser()
	 */
	@Test
	public void NormalTestHideAllReviewsForMutedUser() {
		assertFalse(databaseHelper.hideAllReviewsForMutedUser(testUserStudent2), "testUserStudent2 cannot submit a Review, so no rows should be updated in the database and the return value should be false");
	}
	
	/**
	 * Test invalid values for databaseHelper.hideAllReviewsForMutedUser()
	 */
	@Test
	public void RobustTestHideAllReviewsForMutedUser() {
		assertFalse(databaseHelper.hideAllReviewsForMutedUser(testUserNotRegistered), "Since testUserNotRegistered is not a registered user and never submitted any Reviews, the return value should be false");
	}
	
	/**
	 * Test valid values for databaseHelper.checkIfUserMuted()
	 */
	@Test
	public void NormalTestCheckIfUserMuted() {
		assertTrue(databaseHelper.checkIfUserMuted(testUserStudent2), "testUserStudent2 should yield a return value of true");
		assertFalse(databaseHelper.checkIfUserMuted(testUserStudent), "testUserStudent has not been muted so should yield a return value of false");
		assertFalse(databaseHelper.checkIfUserMuted(testUserReviewer), "testUserReviewer has not been muted so should yield a return value of false");
	}
	
	/**
	 * Test invalid values for databaseHelper.checkIfUserMuted()
	 */
	@Test
	public void RobustTestCheckIfUserMuted() {
		assertFalse(databaseHelper.checkIfUserMuted(testUserNotRegistered), "testUserNotRegistered has not been registered in the database so should yield a return value of false by default");
	}
	
	/**
	 * Test valid values for databaseHelper.markStudentPrivateMessageFlagged()
	 */
	@Test
	public void NormalTestMarkStudentPrivateMessageFlagged() {
		// Flag the message from testUserStudent2 to testUserStudent 
		//assertFalse(databaseHelper.checkIfStudentPrivateMessageFlagged(testUserStudent.getUserName(), testUserStudent2.getUserName(), LocalDateTime.now(), "Test message subject for message from testUserStudent2 to testUserStudent", "Test message body for message from testUserStudent2 to testUserStudent"), "checkIfStudentPrivateMessageFlagged() should return false for message not yet marked flagged");
		databaseHelper.markStudentPrivateMessageFlagged("Student is using derogatory language", testUserStudent.getUserName(), testUserStudent2.getUserName(), LocalDateTime.now(), "Test message subject for message from testUserStudent2 to testUserStudent", "Test message body for message from testUserStudent2 to testUserStudent");
		assertTrue(databaseHelper.checkIfStudentPrivateMessageFlagged(testUserStudent.getUserName(), testUserStudent2.getUserName(), LocalDateTime.now(), "Test message subject for message from testUserStudent2 to testUserStudent", "Test message body for message from testUserStudent2 to testUserStudent"), "checkIfStudentPrivateMessageFlagged() should return true for the same message just marked flagged");
	}
	
	/**
	 * Test invalid values for databaseHelper.markStudentPrivateMessageFlagged()
	 */
	@Test
	public void RobustTestMarkStudentPrivateMessageFlagged() {
		// Message that was never actually sent from testUserStudent to testUserStudent2
		databaseHelper.markStudentPrivateMessageFlagged("Student is using derogatory language", testUserStudent2.getUserName(), testUserStudent.getUserName(), LocalDateTime.now(), "Fake test message subject", "Fake test message body");
		assertFalse(databaseHelper.checkIfStudentPrivateMessageFlagged(testUserStudent2.getUserName(), testUserStudent.getUserName(), LocalDateTime.now(), "Fake test message subject", "Fake test message body"), "checkIfStudentPrivateMessageFlagged() should return false for message that has not been stored in the database");
	}
	
	/**
	 * Test valid values for databaseHelper.markReviewerPrivateMessageFlagged()
	 */
	@Test
	public void NormalTestMarkReviewerPrivateMessageFlagged() {
		// Flag the message from testUserReviewer to testUserStudent
		assertFalse(databaseHelper.checkIfReviewerPrivateMessageFlagged(messageObject.getRecipient(), messageObject.getSender(), LocalDateTime.now(), messageObject.getSubject(), messageObject.getBody()), "checkIfReviewerPrivateMessageFlagged() should return false for message not yet marked flagged");
		databaseHelper.markReviewerPrivateMessageFlagged("Reviewer was incorrect in stating provided answer was incorrect", messageObject.getRecipient(), messageObject.getSender(), LocalDateTime.now(), messageObject.getSubject(), messageObject.getBody());
		assertTrue(databaseHelper.checkIfReviewerPrivateMessageFlagged(messageObject.getRecipient(), messageObject.getSender(), LocalDateTime.now(), messageObject.getSubject(), messageObject.getBody()), "checkIfReviewerPrivateMessageFlagged() should return true for the same message just marked flagged");
	}
	
	/**
	 * Test invalid values for databaseHelper.markReviewerPrivateMessageFlagged()
	 */
	@Test
	public void RobustTestMarkReviewerPrivateMessageFlagged() {
		// Message that was never actually sent from testUserReviewer to testUserStudent2
		databaseHelper.markReviewerPrivateMessageFlagged("Reviewer was incorrect in stating provided answer was incorrect", testUserStudent2.getUserName(), messageObject.getSender(), LocalDateTime.now(), "Fake test message subject", "Fake test message body");
		assertFalse(databaseHelper.checkIfReviewerPrivateMessageFlagged(testUserStudent2.getUserName(), messageObject.getSender(), LocalDateTime.now(), "Fake test message subject", "Fake test message body"), "checkIfReviewerPrivateMessageFlagged should return false for message that has not been stored in the database");
	}
	
	/**
	 * Test valid values for databaseHelper.getReasonStudentPrivateMessageFlagged()
	 */
	@Test
	public void NormalTestGetReasonStudentPrivateMessageFlagged() {
		databaseHelper.markStudentPrivateMessageFlagged("Student is using derogatory language", testUserStudent.getUserName(), testUserStudent2.getUserName(), LocalDateTime.now(), "Test message subject for message from testUserStudent2 to testUserStudent", "Test message body for message from testUserStudent2 to testUserStudent");
		
		assertEquals("Student is using derogatory language", databaseHelper.getReasonStudentPrivateMessageFlagged(testUserStudent.getUserName(), testUserStudent2.getUserName(), LocalDateTime.now(), "Test message subject for message from testUserStudent2 to testUserStudent", "Test message body for message from testUserStudent2 to testUserStudent"), "Test");
		assertNotEquals("Reviewer was incorrect in stating provided answer was incorrect", databaseHelper.getReasonStudentPrivateMessageFlagged(testUserStudent.getUserName(), testUserStudent2.getUserName(), LocalDateTime.now(), "Test message subject for message from testUserStudent2 to testUserStudent", "Test message body for message from testUserStudent2 to testUserStudent"), "Reviewer was incorrect in stating provided answer was incorrect should not be returned as reasonIsFlagged for message from testUserStudent2 to testUserStudent");
	}
	
	/**
	 * Test invalid values for databaseHelper.getReasonReviewerPrivateMessageFlagged()
	 */
	@Test
	public void RobustTestGetReasonStudentPrivateMessageFlagged() {
		assertEquals("", databaseHelper.getReasonStudentPrivateMessageFlagged(testUserStudent2.getUserName(), testUserStudent.getUserName(), LocalDateTime.now(), "Fake test message subject", "Fake test message body"), "Student is using derogatory language should not be returned as reasonIsFlagged for message that was not stored in the database so empty string should be returned");
	}
	
	/**
	 * Test valid values for databaseHelper.getReasonStudentPrivateMessageFlagged()
	 */
	@Test
	public void NormalTestGetReasonReviewerPrivateMessageFlagged() {
		databaseHelper.markReviewerPrivateMessageFlagged("Reviewer was incorrect in stating provided answer was incorrect", messageObject.getRecipient(), messageObject.getSender(), LocalDateTime.now(), messageObject.getSubject(), messageObject.getBody());
		
		assertEquals("Reviewer was incorrect in stating provided answer was incorrect", databaseHelper.getReasonReviewerPrivateMessageFlagged(testUserStudent.getUserName(), testUserReviewer.getUserName(), LocalDateTime.now(), "Test message subject for message from testUserReviewer to testUserStudent", "Test message body for message from testUserReviewer to testUserStudent"), "Reviewer was incorrect in stating provided answer was incorrect should be returned as reasonIsFlagged for message from testUserReviewer to testUserStudent");
		assertNotEquals("Student is using derogatory language", databaseHelper.getReasonReviewerPrivateMessageFlagged(testUserStudent.getUserName(), testUserReviewer.getUserName(), LocalDateTime.now(), "Test message subject for message from testUserReviewer to testUserStudent", "Test message body for message from testUserReviewer to testUserStudent"), "Student is using derogatory language should not be returned as reasonIsFlagged for message from testUserReviewer to testUserStudent");
	}
	
	/**
	 * Test invalid values for databaseHelper.getReasonStudentPrivateMessageFlagged()
	 */
	@Test
	public void RobustTestGetReasonReviewerPrivateMessageFlagged() {
		assertEquals("", databaseHelper.getReasonReviewerPrivateMessageFlagged(testUserStudent2.getUserName(), messageObject.getSender(), LocalDateTime.now(), "Fake test message subject", "Fake test message body"), "Reviewer was incorrect in stating provided answer was incorrect should not be returned as reasonIsFlagged for message that was not stored in the database so empty string should be returned");
	}
	
	/**
	 * Test valid values for databaseHelper.hideQuestion()
	 */
	@Test
	public void NormalTestHideQuestion() {
		assertFalse(newQuestion.getIsHidden(), "Question not yet marked hidden should yield false for the Question.getIsHidden() function");
		databaseHelper.hideQuestion(newQuestion);
		assertTrue(newQuestion.getIsHidden(), "Question marked hidden should yield true for the Question.getIsHidden() function");
	}
	
	/**
	 * Test invalid values for databaseHelper.hideQuestion()
	 */
	@Test
	public void RobustTestHideQuestion() {
		databaseHelper.hideQuestion(fakeQuestion);
		assertFalse(fakeQuestion.getIsHidden(), "Question with questionID = -1 not inserted into the database should yield false for the Question.getisHidden() function");
	}
	
	/**
	 * Test valid values for databaseHelper.hideQuestionReply()
	 */
	@Test
	public void NormalTestHideQuestionReply() {
		assertFalse(questionReplyToHide.getIsHidden(), "Question reply not yet marked hidden should yield false for the Question.getIsHidden() function");
		databaseHelper.hideQuestionReply(questionReplyToHide);
		assertTrue(questionReplyToHide.getIsHidden(), "Question reply marked hidden should yield true for the Question.getIsHidden() function");
	}
	
	/**
	 * Test invalid values for databaseHelper.hideQuestionReply()
	 */
	@Test
	public void RobustTestHideQuestionReply() {
		databaseHelper.hideQuestionReply(fakeQuestionReply);
		assertFalse(fakeQuestionReply.getIsHidden(), "Question reply with replyID = -1 not inserted into the database should yield false for the Question.getisHidden() function");
	}
	
	/**
	 * Test valid values for databaseHelper.hideAnswer()
	 */
	@Test
	public void NormalTestHideAnswer() {
		assertFalse(answerToHide.getIsHidden(), "Answer not yet marked hidden should yield false for the Answer.getIsHidden() function");
		databaseHelper.hideAnswer(answerToHide);
		assertTrue(answerToHide.getIsHidden(), "Answer marked hidden should yield true for the Answer.getIsHidden() function");
	}
	
	/**
	 * Test invalid values for databaseHelper.hideAnswer()
	 */
	@Test
	public void RobustTestHideAnswer() {
		databaseHelper.hideAnswer(fakeAnswer);
		assertFalse(fakeAnswer.getIsHidden(), "Answer with answerID = -1 not inserted into the database should yield false for the Answer.getisHidden() function");
	}
	
	/**
	 * Test valid values for databaseHelper.hideReview()
	 */
	@Test
	public void NormalTestHideReview() {
		assertFalse(newReview.getIsHidden(), "Review not yet marked hidden should yield false for the Review.getIsHidden() function");
		databaseHelper.hideReview(newReview);
		assertTrue(newReview.getIsHidden(), "Review marked hidden should yield true for the Review.getIsHidden() function");
	}
	
	/**
	 * Test invalid values for databaseHelper.hideReview()
	 */
	@Test
	public void RobustTestHideReview() {
		databaseHelper.hideReview(fakeReview);
		assertFalse(fakeReview.getIsHidden(), "Review with reviewID = -1 not inserted into the database should yield false for the Review.getisHidden() function");
	}
}
