package test;

import static org.junit.jupiter.api.Assertions.*;

import java.sql.SQLException;
import java.time.LocalDateTime;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import application.Answer;
import application.Question;
import application.Review;
import application.ReviewerMessage;
import application.User;
import databasePart1.DatabaseHelper;

/**
 * The StudentPrivateMessagesTP4Testing class represents an interface for performing JUnit testing on the StudentPrivateMessages.java class for functions created during Team Project Phase 4.
 *
 * IMPORTANT: uncomment out Line 97 of DatabaseHelper.java before running
 * 
 * @author Cristina Hooe
 * @version 1.0 4/25/2025
 */
class StudentPrivateMessagesTP4Testing {
	
	/**
	 * DatabaseHelper object to call DatabaseHelper functions that need to be tested and connect to/ disconnect from the database
	 */
	static DatabaseHelper databaseHelper = new DatabaseHelper();
	
	/**
	 * Array of the test users provisioned roles where they are provisioned as a Student
	 */
	static boolean[] studentRole = {false, true, false, false, false};
	
	/**
	 * Array of the test users provisioned roles where they are provisioned as a Reviewer
	 */
	static boolean[] reviewerRole = {false, false, true, false, false};
	
	/**
	 * Test user Student to use for methods that require an argument of type User
	 */
	static User testUserStudent;
	
	/**
	 * Second Test user Student to use for methods that require an argument of type User
	 */
	static User testUserStudent2;
	
	/**
	 * Test user Reviewer to use for methods that require an argument of type User
	 */
	static User testUserReviewer;
	
	/**
	 * Test User object which is instantiated but not registered in the database
	 */
	static User testUserNotRegistered;
	
	/**
	 * Test User object which is instantiated but not registered in the database
	 */
	static User testUserNotRegistered2;
	
	/**
	 * Question object specific to a question which is added to the database
	 */
	static Question newQuestion;
	
	/**
	 * Question object not used to add a question to the database
	 */
	static Question fakeQuestion;
	
	/**
	 * questionID generated by the database when adding the test question
	 */
	static int questionID;
	
	/**
	 * Answer object specific to an answer which is added to the database
	 */
	static Answer newAnswer;
	
	/**
	 * answerID generated by the database when adding the test answer
	 */
	static int answerID;
	
	/**
	 * Answer object specific to an answer which is added to the database, but only used to test databaseHelper.hideAnswer()
	 */
	static Answer answerToHide;
	
	/**
	 * replyID generated by the database when adding answerToHide
	 */
	static int answerIDToHide;
	
	/**
	 * Answer object not used to add an answer to the database
	 */
	static Answer fakeAnswer;
	
	/**
	 * Review object specific to a review which is added to the database
	 */
	static Review newReview;
	
	/**
	 * reviewID generated by the database when adding the test review
	 */
	static int reviewID;
	
	/**
	 * Review object not used to add a review to the database
	 */
	static Review fakeReview;

	/**
	 * ReviewerMessage object for test message sent from testUserReviewer to testUserStudent
	 */
	static ReviewerMessage messageObject;
	
	/**
	 * messageID generated by the database when adding the message from Reviewer to testUserStudent to the database
	 */
	static int reviewerToStudentMessageID;

	/**
	 * Method connects to the database and initializes necessary general test objects.
	 * 
	 * @throws Exception SQLException "Failed to connect to database"
	 */
	@BeforeAll
	static void setUpBeforeClass() throws Exception {
		// Create a database connection
		try {
			databaseHelper.connectToDatabase();
		} catch (SQLException e) {
			System.out.println("Failed to connect to database");
		}
		
		// Instantiate student user
		testUserStudent = new User("testStudentUserName", studentRole, "testStudentEmail@asu.edu", "testStudentFirstName", "testStudentLastName", false);
		
		// Add user to the database
		databaseHelper.register(testUserStudent);
		
		// Instantiate 2nd student user
		testUserStudent2 = new User("testSecondStudentUserName", studentRole, "testSecondStudentEmail@asu.edu", "testSecondStudentFirstName", "testSecondStudentLastName", false);
		
		// Add user to the database
		databaseHelper.register(testUserStudent2);
		
		// Instantiate Reviewer user
		testUserReviewer = new User("testReviewerUserName", reviewerRole, "testReviewerEmail@asu.edu", "testReviewerFirstName", "testReviewerLastName", false);
		
		// Add user to the database
		databaseHelper.register(testUserReviewer);
		
		// Instantiate test user but don't add to the database
		testUserNotRegistered = new User("testNonRegisteredUserName", reviewerRole, "testNonRegisteredEmail@asu.edu", "testNonRegisteredFirstName", "testNonRegisteredLastName", false);
		
		// Instantiate test user but don't add to the database
		testUserNotRegistered2 = new User("testNonRegistered2UserName", studentRole, "testNonRegistered2Email@asu.edu", "testNonRegistered2FirstName", "testNonRegistered2LastName", false);
		
		// Instantiate Question object
		newQuestion = new Question(-1, testUserStudent.getUserName(), testUserStudent.getFirstName(), testUserStudent.getLastName(), "Test Question Title", "Test Question Body", false, LocalDateTime.now(), false, "", false);
		
		// Add a test Question to the database
		questionID = databaseHelper.addQuestion(newQuestion.getQuestionTitle() , newQuestion.getQuestionBody(), newQuestion, testUserStudent);
		newQuestion.setQuestionID(questionID);
		
		// Instantiate Question object which will not be added to the database
		fakeQuestion = new Question(-1, testUserStudent.getUserName(), testUserStudent.getFirstName(), testUserStudent.getLastName(), "Test Question Title", "Test Question Body", false, LocalDateTime.now(), false, "", false);
		
		// Instantiate Answer object
		newAnswer = new Answer(-1, questionID, testUserStudent2.getUserName(), testUserStudent2.getFirstName(), testUserStudent2.getLastName(), "Test Answer Text", true, false, LocalDateTime.now(), false, "", false);
		
		// Add a test Answer to the database
		answerID = databaseHelper.addAnswers(newAnswer.getAnswerText(), newAnswer, testUserStudent2, questionID);
		newAnswer.setAnswerID(answerID);
		
		// Instantiate Answer object which will not be added to the database
		fakeAnswer = new Answer(-1, questionID, testUserStudent2.getUserName(), testUserStudent2.getFirstName(), testUserStudent2.getLastName(), "Test Answer Text", true, false, LocalDateTime.now(), false, "", false);
		
		// Instantiate Review object
		newReview = new Review(questionID, answerID, -1, -1, "Test Review Body", testUserReviewer.getUserName(), testUserReviewer.getFirstName(), testUserReviewer.getLastName(), false, "", false);
		
		// Add a test Review to the database
		reviewID = databaseHelper.addReview(testUserReviewer.getUserName(), testUserReviewer.getFirstName(), testUserReviewer.getLastName(), newReview.getReviewBody(), questionID, answerID, -1);
		newReview.setReviewID(reviewID);
		
		// Instantiate Review object which will not be added to the database
		fakeReview = new Review(questionID, answerID, -1, -1, "Test Review Body", testUserReviewer.getUserName(), testUserReviewer.getFirstName(), testUserReviewer.getLastName(), false, "", false);
		
		// Send a message from testUserStudent to testUserStudent2
		databaseHelper.sendPrivateMessage("testStudentUserName", "testSecondStudentUserName", "Test message subject for message from testUserStudent to testUserStudent2", "Test message body for message from testUserStudent to testUserStudent2", "-1");
		
		// Send a message from testUserStudent2 to testUserStudent
		databaseHelper.sendPrivateMessage("testSecondStudentUserName", "testStudentUserName", "Test message subject for message from testUserStudent2 to testUserStudent", "Test message body for message from testUserStudent2 to testUserStudent", "-1");
		
		// Send a message from testUserReviewer to testUserStudent
		messageObject = new ReviewerMessage(-1, "testReviewerUserName", "testStudentUserName", "Student", "Test message subject for message from testUserReviewer to testUserStudent", "Test message body for message from testUserReviewer to testUserStudent", LocalDateTime.now() ,false, -1);
		reviewerToStudentMessageID = databaseHelper.saveReviewerMessage(messageObject);
		
		// Send a message from testUserStudent to testUserReviewer
		databaseHelper.sendPrivateMessage("testStudentUserName", "testReviewerUserName", "Test message subject for message from testUserStudent to testUserReviewer", "Test message body for message from testUserStudent to testUserReviewer", "-1");
	}

	/**
	 * Deletes the test objects from the database and closes the database connection.
	 */
	@AfterAll
	static void tearDownAfterClass() {
		// Delete student-to-student messages
		databaseHelper.deletePrivateMessage("1");
		databaseHelper.deletePrivateMessage("2");
		
		// Delete reviewer-to-student and student-to-reviewer messages
		databaseHelper.deleteReviewerMessage(1);
		databaseHelper.deletePrivateMessage("3");
		
		// Delete Review
		databaseHelper.deleteReview(reviewID);
		
		// Delete Answer
		databaseHelper.deleteAnswer(answerID);
		
		// Delete Question
		databaseHelper.deleteQuestion(questionID);
		
		// Delete reviewer user from the database
		databaseHelper.deleteUser(testUserReviewer);
		
		// Delete 2nd student user from the database
		databaseHelper.deleteUser(testUserStudent2);
		
		// Delete student user from the database
		databaseHelper.deleteUser(testUserStudent);
		
		// Close the database connection
		databaseHelper.closeConnection();	
	}
	
	/**
	 * Test valid values for databaseHelper.getUnreadPrivateMessageCount().
	 */
	@Test
	public void NormalTestGetUnreadPrivateMessageCount() {
		assertEquals(1, databaseHelper.getUnreadPrivateMessageCount(testUserStudent.getUserName()), "testUserStudent received one message from testUserStudent2 and one message from testUserReviewer but 1 message was already marked as read so unread count should be 1");
		assertEquals(0, databaseHelper.getUnreadPrivateMessageCount(testUserStudent2.getUserName()), "testUserStudent2 receieved one message from testUserStudent but it was already marked read so unread count should be 0");
	}
	
	/**
	 * Test invalid values for databaseHelper.getUnreadPrivateMessageCount().
	 */
	@Test
	public void RobustTestGetUnreadPrivateMessageCount() {
		assertEquals(0, databaseHelper.getUnreadPrivateMessageCount(testUserNotRegistered.getUserName()), "testUserNotRegistered is not a registered user so by default should have unread count of 0");
	}

	/**
	 * Test valid values for databaseHelper.markStudentToStudentMessageAsRead().
	 */
	@Test
	public void NormalTestMarkStudentToStudentMessageAsRead() {
		databaseHelper.markStudentToStudentMessageAsRead(testUserStudent2.getUserName(), testUserStudent.getUserName(), "Test message subject for message from testUserStudent to testUserStudent2", "Test message body for message from testUserStudent to testUserStudent2");
		databaseHelper.markStudentToStudentMessageAsRead(testUserStudent.getUserName(), testUserStudent2.getUserName(), "Test message subject for message from testUserStudent2 to testUserStudent", "Test message body for message from testUserStudent2 to testUserStudent");
		assertEquals(0, databaseHelper.getUnreadPrivateMessageCount(testUserStudent2.getUserName()), "Unread message count should now be 0 for testUserStudent2 after marking received message as read");
		assertEquals(1, databaseHelper.getUnreadPrivateMessageCount(testUserStudent.getUserName()), "Unread message count should now be 1 for testUserStudent after marking received message as read");
	}
	
	/**
	 * Test invalid values for databaseHelper.markStudentToStudentMessageAsRead().
	 */
	@Test
	public void RobustTestMarkStudentToStudentMessageAsRead() {
		// Attempt to mark message read never sent
		databaseHelper.markStudentToStudentMessageAsRead(testUserStudent.getUserName(), testUserStudent2.getUserName(), "Fake message subject", "Fake message body");
		assertEquals(0, databaseHelper.getUnreadPrivateMessageCount(testUserStudent.getUserName()), "Unread message count should still be 0 after attempting to mark a never stored in the database message as read");
	}
	
	/**
	 * Test valid values for databaseHelper.markReviewerToStudentMessageAsRead().
	 */
	@Test
	public void NormalTestMarkReviewerToStudentMessageAsRead() {
		databaseHelper.markReviewerToStudentMessageAsRead(testUserStudent.getUserName(), testUserReviewer.getUserName(), "Test message subject for message from testUserReviewer to testUserStudent", "Test message body for message from testUserReviewer to testUserStudent");
		assertEquals(0, databaseHelper.getUnreadPrivateMessageCount(testUserStudent.getUserName()), "Unread message count should now be 0 for testUserStudent after marking received message as read");
	}
	
	/**
	 * Test invalid values for databaseHelper.markReviewerToStudentMessageAsRead().
	 */
	@Test
	public void RobustTestMarkReviewerToStudentMessageAsRead() {
		// Attempt to mark message read never sent
		databaseHelper.markStudentToStudentMessageAsRead(testUserStudent.getUserName(), testUserNotRegistered.getUserName(), "Fake Test Message Subject", "Fake Test Message Body");
		assertEquals(0, databaseHelper.getUnreadPrivateMessageCount(testUserNotRegistered.getUserName()), "testUserNotRegistered unread count should still be 0");
	}
	
	/**
	 * Test valid values for databaseHelper.getPrivateMessagesForStudent().
	 */
	@Test
	public void NormalTestGetPrivateMessagesForStudent() {
		assertEquals(1, databaseHelper.getPrivateMessagesForStudent(testUserStudent2.getUserName()).size(), "ArrayList size returned should be 1 since testUserStudent 2 received 1 message");
		assertEquals(2, databaseHelper.getPrivateMessagesForStudent(testUserStudent.getUserName()).size(), "ArrayList size returned should be 2 since testUserStudent received 2 messages");
	}
	
	/**
	 * Test invalid values for databaseHelper.getPrivateMessagesForStudent()
	 */
	@Test
	public void RobustTestGetPrivateMessagesForStudent() {
		assertEquals(0, databaseHelper.getPrivateMessagesForStudent(testUserNotRegistered2.getUserName()).size(), "ArrayList size returned should be 0 for non-registered Student user who has received no messages");
		assertNotNull(databaseHelper.getPrivateMessagesForStudent(testUserNotRegistered2.getUserName()), "ArrayList returned should not be null even for non-registered Student user who has received no messages");
	}
	
	/**
	 * Test valid values for databaseHelper.getPrivateMessagesSentByStudent().
	 */
	@Test
	public void NormalTestGetPrivateMessagesSentByStudent() {
		assertEquals(2, databaseHelper.getPrivateMessagesSentByStudent(testUserStudent.getUserName()).size(), "ArrayList size returned should be 2 for testUserStudent since they sent 2 messages");
		assertEquals(1, databaseHelper.getPrivateMessagesSentByStudent(testUserStudent2.getUserName()).size(), "ArrayList size returned should be 1 for testUserStudent2 since they sent 1 message");
	}
	
	/**
	 * Test invalid values for databaseHelper.getPrivateMessagesSentByStudent().
	 */
	@Test
	public void RobustTestGetPrivateMessagesSentByStudent() {
		assertEquals(0, databaseHelper.getPrivateMessagesSentByStudent(testUserNotRegistered2.getUserName()).size(), "ArrayList size returned should be 0 for non-registered Student user who has sent no messages");
		assertNotNull(databaseHelper.getPrivateMessagesSentByStudent(testUserNotRegistered2.getUserName()), "ArrayList returned should not be null even for non-registered Student user who has sent no messages");
	}
}
