package test;

import static org.junit.jupiter.api.Assertions.*;

import java.sql.SQLException;
import java.time.LocalDateTime;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import application.Answer;
import application.Question;
import application.User;
import databasePart1.DatabaseHelper;


/**
 * The StudentQuestionsAnswersTesting class represents an interface for performing JUnit testing on the StudentQuestionsAnswers.java class for functions created during Team Project Phase 4.
 *
 * IMPORTANT: uncomment out Line 97 of DatabaseHelper.java before running
 * 
 * @author Cristina Hooe
 * @version 1.0 4/25/2025
 */
class StudentQuestionsAnswersTesting {

	/**
	 * DatabaseHelper object to call DatabaseHelper functions that need to be tested and connect to/ disconnect from the database
	 */
	static DatabaseHelper databaseHelper = new DatabaseHelper();
	
	/**
	 * Array of the test users provisioned roles where they are provisioned as a Student
	 */
	static boolean[] studentRole = {false, true, false, false, false};
	
	/**
	 * Test user Student to use for methods that require an argument of type User
	 */
	static User testUserStudent;
	
	/**
	 * Second Test user Student to use for methods that require an argument of type User
	 */
	static User testUserStudent2;
	
	/**
	 * Question object specific to a question which is added to the database
	 */
	static Question newQuestion;
	
	/**
	 * questionID generated by the database when adding the test question
	 */
	static int questionID;
	
	/**
	 * Answer object specific to answer added to database
	 */
	static Answer newAnswer;
	
	/**
	 * answerID generated when newAnswer inserted into the database
	 */
	static int answerID;
	
	/**
	 * Answer object specific to answer not added to database
	 */
	static Answer fakeAnswer;
	
	/**
	 * Method connects to the database and initializes necessary general test objects.
	 * 
	 * @throws Exception SQLException "Failed to connect to database"
	 */
	@BeforeAll
	static void setUpBeforeClass() throws Exception {
		// Create a database connection
		try {
			databaseHelper.connectToDatabase();
		} catch (SQLException e) {
			System.out.println("Failed to connect to database");
		}
		
		// Instantiate student user
		testUserStudent = new User("testStudentUserName", studentRole, "testStudentEmail@asu.edu", "testStudentFirstName", "testStudentLastName", false);
		
		// Add user to the database
		databaseHelper.register(testUserStudent);
		
		// Instantiate 2nd student user
		testUserStudent2 = new User("testSecondStudentUserName", studentRole, "testSecondStudentEmail@asu.edu", "testSecondStudentFirstName", "testSecondStudentLastName", false);
		
		// Add user to the database
		databaseHelper.register(testUserStudent2);
		
		// Instantiate Question object
		newQuestion = new Question(-1, testUserStudent.getUserName(), testUserStudent.getFirstName(), testUserStudent.getLastName(), "Test Question Title", "Test Question Body", false, LocalDateTime.now(), false, "", false);
		
		// Add a test Question to the database
		questionID = databaseHelper.addQuestion(newQuestion.getQuestionTitle() , newQuestion.getQuestionBody(), newQuestion, testUserStudent);
		newQuestion.setQuestionID(questionID);

		// Instantiate Answer object
		newAnswer = new Answer(-1, questionID, testUserStudent2.getUserName(), testUserStudent2.getFirstName(), testUserStudent2.getLastName(), "Test Answer Text", true, false, LocalDateTime.now(), false, "", false);
		
		// Add a test Answer to the database
		answerID = databaseHelper.addAnswers(newAnswer.getAnswerText(), newAnswer, testUserStudent2, questionID);
		newAnswer.setAnswerID(answerID);
		
		// Instantiate Answer object which will not be added to the database
		fakeAnswer = new Answer(-1, questionID, testUserStudent2.getUserName(), testUserStudent2.getFirstName(), testUserStudent2.getLastName(), "Test Answer Text", true, false, LocalDateTime.now(), false, "", false);
	}

	/**
	 * Deletes the test objects from the database and closes the database connection.
	 */
	@AfterAll
	static void tearDownAfterClass() {
		
		// Delete Answer
		databaseHelper.deleteAnswer(answerID);
		
		// Delete Question
		databaseHelper.deleteQuestion(questionID);
		
		// Delete 2nd student user from the database
		databaseHelper.deleteUser(testUserStudent2);
		
		// Delete student user from the database
		databaseHelper.deleteUser(testUserStudent);
				
		// Close the database connection
		databaseHelper.closeConnection();
	}

	/**
	 * Test valid values for databaseHelper.markAnswerAsRead()
	 */
	@Test
	public void NormalTestMarkAnswerAsRead() {
		assertTrue(newAnswer.getIsAnswerUnread(), "Answer not yet marked as read should yield true for Answer.getIsAnswerUnread() function");
		databaseHelper.markAnswerAsRead(newAnswer);
		assertFalse(newAnswer.getIsAnswerUnread(), "Answer marked as read should yield false for Answer.getIsAnswerUnread() function");
	}
	
	/**
	 * Test invalid values for databaseHelper.markAnswerAsRead()
	 */
	@Test
	public void RobustlTestMarkAnswerAsRead() {
		databaseHelper.markAnswerAsRead(fakeAnswer);
		assertTrue(fakeAnswer.getIsAnswerUnread(), "Answer not inserted into the database should still yield true for Answer.getIsAnswerUnread() even after function call");
	}
}
