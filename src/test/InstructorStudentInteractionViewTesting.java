package test;

import static org.junit.jupiter.api.Assertions.*;

import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import application.Answer;
import application.Question;
import application.Review;
import application.ReviewerMessage;
import application.User;
import databasePart1.DatabaseHelper;

/**
 * The InstructorStudentInteractionViewTesting class represents an interface for performing JUnit testing on the InstructorStudentInteractionViewTesting.java class for functions created during Team Project Phase 4.
 *
 * IMPORTANT: uncomment out Line 97 of DatabaseHelper.java before running
 * 
 * @author Cristina Hooe
 * @version 1.0 4/25/2025
 */
class InstructorStudentInteractionViewTesting {
	
	/**
	 * DatabaseHelper object to call DatabaseHelper functions that need to be tested and connect to/ disconnect from the database
	 */
	static DatabaseHelper databaseHelper = new DatabaseHelper();
	
	/**
	 * Array of the test users provisioned roles where they are provisioned as a Student
	 */
	static boolean[] studentRole = {false, true, false, false, false};
	
	/**
	 * Array of the test users provisioned roles where they are provisioned as a Reviewer
	 */
	static boolean[] reviewerRole = {false, false, true, false, false};
	
	/**
	 * Test user Student to use for methods that require an argument of type User
	 */
	static User testUserStudent;
	
	/**
	 * Second Test user Student to use for methods that require an argument of type User
	 */
	static User testUserStudent2;
	
	/**
	 * Test user Reviewer to use for methods that require an argument of type User
	 */
	static User testUserReviewer;
	
	/**
	 * Test User object which is instantiated but not registered in the database
	 */
	static User testUserNotRegistered;
	
	/**
	 * Test User object which is instantiated but not registered in the database
	 */
	static User testUserNotRegistered2;
	
	/**
	 * Question object specific to a question which is added to the database
	 */
	static Question newQuestion;
	
	/**
	 * questionID generated by the database when adding the test question
	 */
	static int questionID;
	
	/**
	 * Question object specific to a question reply which is added to the database
	 */
	static Question newQuestionReply;
	
	/**
	 * replyID generated by the database when adding the test question reply
	 */
	static int replyID;
	
	
	/**
	 * Answer object specific to an answer which is added to the database
	 */
	static Answer newAnswer;
	
	/**
	 * answerID generated by the database when adding the test answer
	 */
	static int answerID;
	
	/**
	 * Review object specific to a review which is added to the database
	 */
	static Review newReview;
	
	/**
	 * reviewID generated by the database when adding the test review
	 */
	static int reviewID;
	
	/**
	 * ReviewerMessage object for test message sent from testUserReviewer to testUserStudent
	 */
	static ReviewerMessage messageObject;
	
	/**
	 * messageID generated by the database when adding the message from Reviewer to testUserStudent to the database
	 */
	static int reviewerToStudentMessageID;
	
	
	/**
	 * Method connects to the database and initializes necessary general test objects.
	 * 
	 * @throws Exception SQLException "Failed to connect to database"
	 */
	@BeforeAll
	static void setUpBeforeClass() throws Exception {
		// Create a database connection
		try {
			databaseHelper.connectToDatabase();
		} catch (SQLException e) {
			System.out.println("Failed to connect to database");
		}
		
		// Instantiate student user
		testUserStudent = new User("testStudentUserName", studentRole, "testStudentEmail@asu.edu", "testStudentFirstName", "testStudentLastName", false);
		
		// Add user to the database
		databaseHelper.register(testUserStudent);
		
		// Instantiate 2nd student user
		testUserStudent2 = new User("testSecondStudentUserName", studentRole, "testSecondStudentEmail@asu.edu", "testSecondStudentFirstName", "testSecondStudentLastName", false);
		
		// Add user to the database
		databaseHelper.register(testUserStudent2);
		
		// Instantiate Reviewer user
		testUserReviewer = new User("testReviewerUserName", reviewerRole, "testReviewerEmail@asu.edu", "testReviewerFirstName", "testReviewerLastName", false);
		
		// Add user to the database
		databaseHelper.register(testUserReviewer);
		
		// Instantiate test user but don't add to the database
		testUserNotRegistered = new User("testNonRegisteredUserName", reviewerRole, "testNonRegisteredEmail@asu.edu", "testNonRegisteredFirstName", "testNonRegisteredLastName", false);
		
		// Instantiate test user but don't add to the database
		testUserNotRegistered2 = new User("testNonRegistered2UserName", studentRole, "testNonRegistered2Email@asu.edu", "testNonRegistered2FirstName", "testNonRegistered2LastName", false);
		
		// Instantiate Question object
		newQuestion = new Question(-1, testUserStudent.getUserName(), testUserStudent.getFirstName(), testUserStudent.getLastName(), "Test Question Title", "Test Question Body", false, LocalDateTime.now(), false, "", false);
		
		// Add a test Question to the database
		questionID = databaseHelper.addQuestion(newQuestion.getQuestionTitle() , newQuestion.getQuestionBody(), newQuestion, testUserStudent);
		newQuestion.setQuestionID(questionID);
				
		// Instantiate Question reply object
		newQuestionReply = new Question(-1, newQuestion.getQuestionID(), testUserStudent2.getUserName(), testUserStudent2.getFirstName(), testUserStudent2.getLastName(), "Test Question Reply", "Replying to: " + newQuestion.getQuestionTitle(), false, "", false);
		newQuestionReply.setCreationTime(LocalDateTime.now());
		
		// Add test Question reply to the database
		replyID = databaseHelper.addReply(newQuestionReply.getQuestionReply(), questionID, newQuestionReply, testUserStudent2, newQuestionReply.getReplyingTo());
		newQuestionReply.setReplyID(replyID);
		
		// Instantiate Answer object
		newAnswer = new Answer(-1, questionID, testUserStudent2.getUserName(), testUserStudent2.getFirstName(), testUserStudent2.getLastName(), "Test Answer Text", true, false, LocalDateTime.now(), false, "", false);
		
		// Add a test Answer to the database
		answerID = databaseHelper.addAnswers(newAnswer.getAnswerText(), newAnswer, testUserStudent2, questionID);
		newAnswer.setAnswerID(answerID);
		
		// Instantiate Review object
		newReview = new Review(questionID, answerID, -1, -1, "Test Review Body", testUserReviewer.getUserName(), testUserReviewer.getFirstName(), testUserReviewer.getLastName(), false, "", false);
		
		// Add a test Review to the database
		reviewID = databaseHelper.addReview(testUserReviewer.getUserName(), testUserReviewer.getFirstName(), testUserReviewer.getLastName(), newReview.getReviewBody(), questionID, answerID, -1);
		newReview.setReviewID(reviewID);
		
		// Send a message from testUserStudent to testUserStudent2
		databaseHelper.sendPrivateMessage("testStudentUserName", "testSecondStudentUserName", "Test message subject for message from testUserStudent to testUserStudent2", "Test message body for message from testUserStudent to testUserStudent2", "-1");
		
		// Send a message from testUserStudent2 to testUserStudent
		databaseHelper.sendPrivateMessage("testSecondStudentUserName", "testStudentUserName", "Test message subject for message from testUserStudent2 to testUserStudent", "Test message body for message from testUserStudent2 to testUserStudent", "-1");
		
		// Send a message from testUserReviewer to testUserStudent
		messageObject = new ReviewerMessage(-1, "testReviewerUserName", "testStudentUserName", "Student", "Test message subject for message from testUserReviewer to testUserStudent", "Test message body for message from testUserReviewer to testUserStudent", LocalDateTime.now() ,false, -1);
		reviewerToStudentMessageID = databaseHelper.saveReviewerMessage(messageObject);
		
		// Send a message from testUserStudent to testUserReviewer
		databaseHelper.sendPrivateMessage("testStudentUserName", "testReviewerUserName", "Test message subject for message from testUserStudent to testUserReviewer", "Test message body for message from testUserStudent to testUserReviewer", "-1");
	}

	/**
	 * Deletes the test objects from the database and closes the database connection.
	 */
	@AfterAll
	static void tearDownAfterClass(){
		// Delete student-to-student messages
		databaseHelper.deletePrivateMessage("1");
		databaseHelper.deletePrivateMessage("2");
		
		// Delete reviewer-to-student and student-to-reviewer messages
		databaseHelper.deleteReviewerMessage(1);
		databaseHelper.deletePrivateMessage("3");
		
		// Delete Review
		databaseHelper.deleteReview(reviewID);
		
		// Delete Answer
		databaseHelper.deleteAnswer(answerID);
		
		// Delete Question Reply
		databaseHelper.deleteRepliesForQuestion(questionID);
		
		// Delete Question
		databaseHelper.deleteQuestion(questionID);
		
		// Delete reviewer user from the database
		databaseHelper.deleteUser(testUserReviewer);
		
		// Delete 2nd student user from the database
		databaseHelper.deleteUser(testUserStudent2);
		
		// Delete student user from the database
		databaseHelper.deleteUser(testUserStudent);
		
		// Close the database connection
		databaseHelper.closeConnection();	
	}

	
	/**
	 * Test for databaseHelper.getMutedUsers()
	 */
	@Test
	public void TestGetMutedUsers() {
		databaseHelper.muteUser(testUserStudent);

		assertDoesNotThrow(() -> {
			ArrayList<String> returnedList = databaseHelper.getMutedUsers();
			assertEquals(1, databaseHelper.getMutedUsers().size(), "ArrayList size returned should be 1 after muting only 1 user");
			assertEquals(testUserStudent.getUserName(), returnedList.get(0), "userName returned at index 0 of returned ArrayList should be testStudentUserName");
		});
		
		assertDoesNotThrow(() -> {
			databaseHelper.muteUser(testUserStudent2);
			ArrayList<String> returnedList = databaseHelper.getMutedUsers();
			assertEquals(2, databaseHelper.getMutedUsers().size(), "ArrayList size returned should be 2 after muting 2 users");
			assertEquals(testUserStudent2.getUserName(), returnedList.get(1), "userName returned at index 1 of returned ArrayList should be testSecondStudentUserName");
		});
		
		assertDoesNotThrow(() -> {
			databaseHelper.muteUser(testUserReviewer);
			ArrayList<String> returnedList = databaseHelper.getMutedUsers();
			assertEquals(3, databaseHelper.getMutedUsers().size(), "ArrayList size returned should be 3 after muting 3 users");
			assertEquals(testUserReviewer.getUserName(), returnedList.get(2), "userName returned at index 2 of returned ArrayList should be testReviewerUserName");
		});
	}
	
	/**
	 * Test for databaseHelper.getMutedUsersByRole()
	 */
	@Test
	public void TestGetMutedUsersByRole() {
		assertDoesNotThrow(() -> {
			List<String> users = databaseHelper.getMutedUsersByRole("Student");
			if (users.size() == 0 ) {
				assertNotNull(users, "Should not return null even if there are no muted Student users");
			}
			else {
				assertEquals(testUserStudent.getUserName(), users.get(0), "userName returned at index 0 should be testUserStudent");
				assertEquals(testUserStudent2.getUserName(), users.get(1), "userName returned at index 1 should be testUserStudent2");
			}
		});
		
		assertDoesNotThrow(() -> {
			List<String> users = databaseHelper.getMutedUsersByRole("Reviewer");
			if (users.size() == 0 ) {
				assertNotNull(users, "Should not return null even if there are no muted Reviewer users");
			}
			else {
				assertEquals(testUserReviewer.getUserName(), users.get(0), "userName returned should be testUserReviewer for only Reviewer user muted");
			}
		});
	}
	
	/**
	 * Test for databaseHelper.clearAnswerFlag()
	 */
	@Test
	public void TestClearAnswerFlag() {
		 databaseHelper.markAnswerFlagged(newAnswer);
		 assertTrue(databaseHelper.clearAnswerFlag(answerID), "True should be returned indicating Answer flag was successfully cleared");
	}
	
	/**
	 * Test for databaseHelper.clearQuestionFlag()
	 */
	@Test
	public void TestClearQuestionFlag() {
		 databaseHelper.markQuestionFlagged(newQuestion);
		 assertTrue(databaseHelper.clearQuestionFlag(questionID), "True should be returned indicating Question flag was successfully cleared");
	}
	
	/**
	 * Test for databaseHelper.clearHiddenQuestion()
	 */
	@Test
	public void TestClearHiddenQuestion() {
		 databaseHelper.hideQuestion(newQuestion);
		 assertTrue(databaseHelper.clearHiddenQuestion(questionID), "True should be returned indicating Question was sucessfully unhidden");
	}
	
	/**
	 * Test for databaseHelper.clearHiddenAnswer()
	 */
	@Test
	public void TestClearHiddenAnswer() {
		 databaseHelper.hideAnswer(newAnswer);
		 assertTrue(databaseHelper.clearHiddenAnswer(answerID), "True should be returned indicating Answer was successfully unhidden");
	}
	
	/**
	 * Test for databaseHelper.clearReviewFlag()
	 */
	@Test
	public void TestClearReviewFlag() {
		databaseHelper.markReviewFlagged(newReview);
		assertTrue(databaseHelper.clearReviewFlag(reviewID), "True should be returned indicating Review flag was successfully cleared");
	}
	
	/**
	 * Test for databaseHelper.clearHiddenReview()
	 */
	@Test
	public void TestClearHiddenReview() {
		 databaseHelper.hideReview(newReview);
		 assertTrue(databaseHelper.clearHiddenReview(reviewID), "True should be returned indicating Review was successfully unhidden");
	}
	
	/**
	 * Test for databaseHelper.unmuteUser()
	 */
	@Test
	public void TestUnmuteUser() {
		 databaseHelper.unmuteUser(testUserStudent.getUserName());
		 databaseHelper.unmuteUser(testUserStudent2.getUserName());
		 databaseHelper.unmuteUser(testUserReviewer.getUserName());
		 
		 assertFalse(databaseHelper.checkIfUserMuted(testUserStudent), "testUserStudent just unmuted should return false for check if muted");
		 assertFalse(databaseHelper.checkIfUserMuted(testUserStudent2), "testUserStudent2 just unmuted should return false for check if muted");
		 assertFalse(databaseHelper.checkIfUserMuted(testUserReviewer), "testUserStudent just unmuted should return false for check if muted");
	}
	
	/**
	 * Test for databaseHelper.clearHiddenQuestionsForUser()
	 */
	@Test
	public void TestClearHiddenQuestionsForUser() {
		databaseHelper.hideAllQuestionsForMutedUser(testUserStudent);
		assertTrue(databaseHelper.clearHiddenQuestionsForUser(testUserStudent.getUserName()), "True should be returned indicating questions created by testUserStudent were unhidden");
	}
	
	/**
	 * Test for databaseHelper.clearHiddenRepliesForUser()
	 */
	@Test
	public void TestClearHiddenRepliesForUser() {
		databaseHelper.hideAllQuestionRepliesForMutedUser(testUserStudent2);
		assertTrue(databaseHelper.clearHiddenRepliesForUser(testUserStudent2.getUserName()), "True should be returned indicating question replies created by testUserStudent2 were unhidden");
	}

	/**
	 * Test for databaseHelper.clearHiddenAnswersForUser()
	 */
	@Test
	public void TestClearHiddenAnswersForUser() {
		databaseHelper.hideAllAnswersForMutedUser(testUserStudent2);
		assertTrue(databaseHelper.clearHiddenAnswersForUser(testUserStudent2.getUserName()), "True should be returned indicating answers created by testUserStudent2 were unhidden");
	}
	
	/**
	 * Test for databaseHelper.clearHiddenReviewsForUser()
	 */
	@Test
	public void TestClearHiddenReviewsForUser() {
		databaseHelper.hideAllReviewsForMutedUser(testUserReviewer);
		assertTrue(databaseHelper.clearHiddenReviewsForUser(testUserReviewer.getUserName()), "True should be returned indicating reviews created by testUserReviewer were unhidden");
	}
	
	/**
	 * Test for databaseHelper.getFlaggedStudentPrivateMessages()
	 */
	@Test
	public void TestGetFlaggedStudentPrivateMessages() {
		assertDoesNotThrow(() -> {
			databaseHelper.getFlaggedStudentPrivateMessages();
		});
	}
	
	/**
	 * Test for databaseHelper.getFlaggedReviewerPrivateMessages()
	 */
	@Test
	public void TestGetFlaggedReviewerPrivateMessages() {
		assertDoesNotThrow(() -> {
			databaseHelper.getFlaggedReviewerPrivateMessages();
		});
	}
		
	/**
	 * Test for databaseHelper.getAllStudentMessagesWithIds()
	 */
	@Test
	public void TestGetAllStudentMessagesWithIds() {
		assertDoesNotThrow(() -> {
			databaseHelper.getAllStudentMessagesWithIds();
		});
	}
	
	/**
	 * Test for databaseHelper.getFlaggedStudentMessagesWithIds()
	 */
	@Test
	public void TestGetFlaggedStudentMessagesWithIds() {
		assertDoesNotThrow(() -> {
			databaseHelper.getFlaggedStudentMessagesWithIds();
		});
	}
	
	/**
	 * Test for databaseHelper.getAllReviewerMessagesWithIds()
	 */
	@Test
	public void TestGetAllReviewerMessagesWithIds() {
		assertDoesNotThrow(() -> {
			databaseHelper.getAllReviewerMessagesWithIds();
		});
	}
	
	/**
	 * Test for databaseHelper.getFlaggedReviewerMessagesWithIds()
	 */
	@Test
	public void TestGetFlaggedReviewerMessagesWithIds() {
		assertDoesNotThrow(() -> {
			databaseHelper.getFlaggedReviewerMessagesWithIds();
		});
	}
	
	/**
	 * Test for databaseHelper.clearStudentPrivateMessageFlag()
	 */
	@Test
	public void TestClearStudentPrivateMessageFlag() {
		databaseHelper.markStudentPrivateMessageFlagged("Student is using derogatory language", testUserStudent.getUserName(), testUserStudent2.getUserName(), LocalDateTime.now(), "Test message subject for message from testUserStudent2 to testUserStudent", "Test message body for message from testUserStudent2 to testUserStudent");
		databaseHelper.clearStudentPrivateMessageFlag(testUserStudent.getUserName(), testUserStudent2.getUserName(), LocalDateTime.now(), "Test message subject for message from testUserStudent2 to testUserStudent", "Test message body for message from testUserStudent2 to testUserStudent");
		assertFalse(databaseHelper.checkIfStudentPrivateMessageFlagged(testUserStudent.getUserName(), testUserStudent2.getUserName(), LocalDateTime.now(), "Test message subject for message from testUserStudent2 to testUserStudent", "Test message body for message from testUserStudent2 to testUserStudent"), "Student private message should now return false since unflagged");
	}
	
	/**
	 * Test for databaseHelper.clearReviewerPrivateMessageFlag()
	 */
	@Test
	public void TestClearReviewerPrivateMessageFlag() {
		databaseHelper.markReviewerPrivateMessageFlagged("Reviewer was incorrect in stating provided answer was incorrect", messageObject.getRecipient(), messageObject.getSender(), LocalDateTime.now(), messageObject.getSubject(), messageObject.getBody());
		databaseHelper.clearReviewerPrivateMessageFlag(messageObject.getSender(), messageObject.getRecipient(), LocalDateTime.now(), messageObject.getSubject(), messageObject.getBody());
		assertFalse(databaseHelper.checkIfReviewerPrivateMessageFlagged(messageObject.getRecipient(), messageObject.getSender(), LocalDateTime.now(), messageObject.getSubject(), messageObject.getBody()), "Reviewer private message should now return false since unflagged");
	}
}
